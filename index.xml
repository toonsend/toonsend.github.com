<?xml version="1.0"?>
<rss version="2.0">
<channel>
<title>ToonsWiki</title>
<description>a place for stuff</description>
<language>en</language>
<copyright>Copyright 2012 Toons</copyright>
<pubDate>Thu, 10 May 2012 14:22:35 GMT</pubDate>
<lastBuildDate>Thu, 10 May 2012 14:22:35 GMT</lastBuildDate>
<docs>http://blogs.law.harvard.edu/tech/rss</docs>
<generator>TiddlyWiki 2.6.5</generator>
<item>
<title>Flushing Your Local Cache</title>
<description>&lt;pre&gt;dscacheutil -flushcache
&lt;/pre&gt;</description>
<category>Mac</category>
<link>null#%5B%5BFlushing%20Your%20Local%20Cache%5D%5D</link>
<pubDate>Thu, 10 May 2012 14:22:29 GMT</pubDate>

</item>
<item>
<title>Setting Marks and Jumping</title>
<description>Typing &lt;br&gt;&lt;pre&gt;'0
&lt;/pre&gt; will cause Vim to jump to the 0 mark, which is a &quot;special mark&quot; that represents the last file edited when Vim was exited.&lt;br&gt;&lt;br&gt;To set a mark, type ma &lt;span&gt;—&lt;/span&gt; this will store the current position in the a mark. Move somewhere else within the file then type 'a to go back. These lowercase marks are remembered as long as the file is in the buffer list. Conversely, the uppercase marks 'A to 'Z include the file name, so they can be used to efficiently jump between points in different files.&lt;br&gt;&lt;br&gt;There are a lot more special marks, but one that's worth knowing about is &lt;br&gt;&lt;pre&gt;''.
&lt;/pre&gt;Typing this will move to the position before the last jump, or where the last mark as created. I find myself using this when I skip somewhere far away in a long file and have forgot to set a mark from where I left off.&lt;br&gt;&lt;br&gt;To read more about these motion commands, take a look at &lt;br&gt;&lt;pre&gt;:help mark-motions.
&lt;/pre&gt;</description>
<category>Vim</category>
<link>null#%5B%5BSetting%20Marks%20and%20Jumping%5D%5D</link>
<pubDate>Wed, 09 May 2012 13:16:00 GMT</pubDate>

</item>
<item>
<title>Surround Vim Plugin</title>
<description>Press cs&quot;' (that's c, s, double quote, single quote) inside &lt;br&gt;&lt;br&gt;&quot;Hello world!&quot; &lt;br&gt;&lt;br&gt;to change it to &lt;br&gt;&lt;br&gt;'Hello world!' &lt;br&gt;&lt;br&gt;Now press cs'&amp;lt;q&amp;gt; to change it to &lt;br&gt;&lt;br&gt;&amp;lt;q&amp;gt;Hello world!&amp;lt;/q&amp;gt; &lt;br&gt;&lt;br&gt;To go full circle, press cst&quot; to get &lt;br&gt;&lt;br&gt;&quot;Hello world!&quot; &lt;br&gt;&lt;br&gt;To remove the delimiters entirely, press ds&quot; . &lt;br&gt;&lt;br&gt;Hello world! &lt;br&gt;&lt;br&gt;Now with the cursor on &quot;Hello&quot;, press ysiw] (iw is a text object). &lt;br&gt;&lt;br&gt;[Hello] world! &lt;br&gt;&lt;br&gt;Let's make that braces and add some space (use &quot;}&quot; instead of &quot;{&quot; for no space): cs]{ &lt;br&gt;&lt;br&gt;{ Hello } world! &lt;br&gt;&lt;br&gt;Now wrap the entire line in parentheses with yssb or yss) . &lt;br&gt;&lt;br&gt;({ Hello } world!) &lt;br&gt;&lt;br&gt;Revert to the original text: ds{ds) &lt;br&gt;&lt;br&gt;Hello world! &lt;br&gt;&lt;br&gt;Emphasize hello: ysiw&amp;lt;em&amp;gt; &lt;br&gt;&lt;br&gt;&amp;lt;em&amp;gt;Hello&amp;lt;/em&amp;gt; world! &lt;br&gt;&lt;br&gt;Finally, let's try out visual mode. Press a capital V (for linewise visual mode) &lt;br&gt;followed by S&amp;lt;p class=&quot;important&quot;&amp;gt;. &lt;br&gt;&lt;br&gt;&amp;lt;p class=&quot;important&quot;&amp;gt; &lt;br&gt;  &amp;lt;em&amp;gt;Hello&amp;lt;/em&amp;gt; world! &lt;br&gt;&amp;lt;/p&amp;gt; </description>
<category>Vim</category>
<link>null#%5B%5BSurround%20Vim%20Plugin%5D%5D</link>
<pubDate>Wed, 25 Apr 2012 11:57:00 GMT</pubDate>

</item>
<item>
<title>Replace word with buffer in vim</title>
<description>his method has the advantage of being easily repeatable using the . repeat command.&lt;br&gt;&lt;pre&gt;yiw	 yank inner word (copy word under cursor, say &quot;first&quot;. Same as above).
...	 Move the cursor to another word (say &quot;second&quot;).
ciw&amp;lt;C-r&amp;gt;0	 select &quot;second&quot;, then replace it with &quot;first&quot; If you are at the start of the word then cw&amp;lt;C-r&amp;gt;0 is sufficient.
...	 Move the cursor to another word (say &quot;third&quot;).
.	 select &quot;third&quot;, then replace it with &quot;first&quot;.
&lt;/pre&gt;</description>
<category>Vim</category>
<link>null#%5B%5BReplace%20word%20with%20buffer%20in%20vim%5D%5D</link>
<pubDate>Wed, 25 Apr 2012 11:56:00 GMT</pubDate>

</item>
<item>
<title>Changing the hostname or computer name in ubuntu</title>
<description>This is a really simple one, but can cause a lot of weeping and gnashing of teeth. You were given the default &quot;ubuntu&quot; hostname when you installed, and now you want something cooler that enhances your street cred. Heres how to change it:&lt;br&gt;&lt;br&gt;Edit /etc/hostname and change to the new value, you can use nano instead of vi, but remember that real men prefer vi.&lt;br&gt;&lt;pre&gt;vi /etc/hostname
&lt;/pre&gt;&lt;br&gt;Edit /etc/hosts and change the old 127.0.1.1 line to your new hostname (if you dont do this, you wont be able to use sudo anymore. If you hav e already done it, press ESC on the grub menu, choose recovery, and edit your host file to the correct settings)&lt;br&gt;&lt;pre&gt;127.0.0.1   localhost
127.0.1.1   ubuntu.local    ubuntu   # change to your new hostname/fqdn
&lt;/pre&gt;Now after a reboot, your hostname will be the new one you chose. To change without a reboot, you can just use hostname.sh after you edit /etc/hostname:&lt;br&gt;&lt;pre&gt;sudo /etc/init.d/hostname.sh start
&lt;/pre&gt;</description>
<category>Linux</category>
<link>null#%5B%5BChanging%20the%20hostname%20or%20computer%20name%20in%20ubuntu%5D%5D</link>
<pubDate>Wed, 18 Apr 2012 10:31:00 GMT</pubDate>

</item>
<item>
<title>Date Format In Ruby</title>
<description>Format meaning &lt;br&gt;&lt;br&gt;&lt;pre&gt;  %a - The abbreviated weekday name (``Sun'')
  %A - The  full  weekday  name (``Sunday'')
  %b - The abbreviated month name (``Jan'')
  %B - The  full  month  name (``January'')
  %c - The preferred local date and time representation
  %d - Day of the month (01..31)
  %H - Hour of the day, 24-hour clock (00..23)
  %I - Hour of the day, 12-hour clock (01..12)
  %j - Day of the year (001..366)
  %m - Month of the year (01..12)
  %M - Minute of the hour (00..59)
  %p - Meridian indicator (``AM''  or  ``PM'')
  %S - Second of the minute (00..60)
  %U - Week  number  of the current year,
          starting with the first Sunday as the first
          day of the first week (00..53)
  %W - Week  number  of the current year,
          starting with the first Monday as the first
          day of the first week (00..53)
  %w - Day of the week (Sunday is 0, 0..6)
  %x - Preferred representation for the date alone, no time
  %X - Preferred representation for the time alone, no date
  %y - Year without a century (00..99)
  %Y - Year with century
  %Z - Time zone name
  %% - Literal ``%'' character

   t = Time.now
   t.strftime(&quot;Printed on %m/%d/%Y&quot;)   #=&amp;gt; &quot;Printed on 04/09/2003&quot;
   t.strftime(&quot;at %I:%M%p&quot;)            #=&amp;gt; &quot;at 08:56AM&quot;
&lt;/pre&gt;</description>
<category>Ruby</category>
<link>null#%5B%5BDate%20Format%20In%20Ruby%5D%5D</link>
<pubDate>Thu, 12 Apr 2012 19:03:00 GMT</pubDate>

</item>
<item>
<title>Fixing Tmux Cut and Paste</title>
<description>Tmux is becoming pretty popular as of late, but as with any new technology, there are skeptics. I’m here to quell some rumors and outline how to start using Tmux effectively.&lt;br&gt;&lt;br&gt;Out of all the questions I get, the most common is, “Does copying and pasting work in Tmux? I heard it wasn’t possible.” Forget that noise; copying and pasting works wonderfully with a couple of extra steps.&lt;br&gt;&lt;br&gt;&lt;a target=&quot;_blank&quot; title=&quot;External link to http://robots.thoughtbot.com/post/19398560514/how-to-copy-and-paste-with-tmux-on-mac-os-x&quot; href=&quot;http://robots.thoughtbot.com/post/19398560514/how-to-copy-and-paste-with-tmux-on-mac-os-x&quot; class=&quot;externalLink&quot;&gt;http://robots.thoughtbot.com/post/19398560514/how-to-copy-and-paste-with-tmux-on-mac-os-x&lt;/a&gt;</description>
<link>null#%5B%5BFixing%20Tmux%20Cut%20and%20Paste%5D%5D</link>
<pubDate>Sat, 07 Apr 2012 05:14:00 GMT</pubDate>

</item>
<item>
<title>Creating a new MySql User.</title>
<description>&lt;pre&gt;mysql&amp;gt; CREATE USER 'monty'@'localhost' IDENTIFIED BY 'some_pass';
mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO 'monty'@'localhost'
    -&amp;gt;     WITH GRANT OPTION;
mysql&amp;gt; CREATE USER 'monty'@'%' IDENTIFIED BY 'some_pass';
mysql&amp;gt; GRANT ALL PRIVILEGES ON *.* TO 'monty'@'%'
    -&amp;gt;     WITH GRANT OPTION;
mysql&amp;gt; CREATE USER 'admin'@'localhost';
mysql&amp;gt; GRANT RELOAD,PROCESS ON *.* TO 'admin'@'localhost';
mysql&amp;gt; CREATE USER 'dummy'@'localhost';
&lt;/pre&gt;</description>
<link>null#%5B%5BCreating%20a%20new%20MySql%20User.%5D%5D</link>
<pubDate>Wed, 04 Apr 2012 14:20:00 GMT</pubDate>

</item>
<item>
<title>Forgetting to run screen</title>
<description>So I'm in a friend's house and I've been doing some compwinner work when I realised there is no way this alter table is going to finish before I go home and I forgot to run screen. A conversation with Toons came in to my head and I suddenly remembered something. &lt;br&gt;If you do make this mistake you can get around it as follows&lt;br&gt;&lt;pre&gt;CTRL-z   suspends your current process
bg backgrounds it
disown %1 detaches it from your pts
&lt;/pre&gt;&lt;br&gt;hey presto you now can go shut the terminal, go away and it'll keep running in the background. :)&lt;br&gt;Obviously unlike in screen, you can't get it back, but at least you haven't wasted 4 hours&lt;br&gt;&lt;br&gt;DMC</description>
<category>bash</category>
<link>null#%5B%5BForgetting%20to%20run%20screen%5D%5D</link>
<pubDate>Thu, 22 Mar 2012 09:14:00 GMT</pubDate>

</item>
<item>
<title>How to fix the backspace key in screen</title>
<description>&lt;pre&gt;alias screen='TERM=screen screen'
&lt;/pre&gt;</description>
<link>null#%5B%5BHow%20to%20fix%20the%20backspace%20key%20in%20screen%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 10:31:00 GMT</pubDate>

</item>
<item>
<title>Removing spaces from filenames - renaming files</title>
<description>&lt;pre&gt;find . -name '* *' | while read file; do target=`echo &quot;$file&quot; | sed 's/ /_/g'`; echo &quot;Renaming '$file' to '$target'&quot;; mv &quot;$file&quot; &quot;$target&quot;; done;
&lt;/pre&gt;</description>
<category>Bash</category>
<link>null#%5B%5BRemoving%20spaces%20from%20filenames%20-%20renaming%20files%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 10:12:00 GMT</pubDate>

</item>
<item>
<title>Get all the listening ports on a Mac</title>
<description>&lt;pre&gt;netstat -at | grep -i &quot;listen&quot;
&lt;/pre&gt;</description>
<category>Mac</category>
<category>Bash</category>
<link>null#%5B%5BGet%20all%20the%20listening%20ports%20on%20a%20Mac%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 10:03:00 GMT</pubDate>

</item>
<item>
<title>Tar a directory</title>
<description>&lt;pre&gt;tar cvzf foo.tgz cps100
&lt;/pre&gt;will tar the directory cps100 (and its files/subdirectories) into a tar file named foo.tgz. </description>
<category>Bash</category>
<link>null#%5B%5BTar%20a%20directory%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 10:02:00 GMT</pubDate>

</item>
<item>
<title>Terminal Changing Text</title>
<description>Moves the cursor to the start of a line&lt;br&gt;&lt;pre&gt;ctrl+a or Home
&lt;/pre&gt;&lt;br&gt;Moves the cursor to the end of a line.&lt;br&gt;&lt;pre&gt;ctrl+e or End
&lt;/pre&gt;&lt;br&gt;Moves to the beginning of the previous or current word.&lt;br&gt;&lt;pre&gt;ctrl+b
&lt;/pre&gt;&lt;br&gt;Deletes from the current cursor position to the end of the line.&lt;br&gt;&lt;pre&gt;ctrl+k
&lt;/pre&gt;&lt;br&gt;Deletes the whole of the current line.&lt;br&gt;&lt;pre&gt;ctrl+u
&lt;/pre&gt;&lt;br&gt;Deletes the word before the cursor.&lt;br&gt;&lt;pre&gt;ctrl+w
&lt;/pre&gt;</description>
<category>Bash</category>
<link>null#%5B%5BTerminal%20Changing%20Text%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 10:02:00 GMT</pubDate>

</item>
<item>
<title>Using Tar</title>
<description>To tar all .cc and .h files into a tar file named foo.tgz use:&lt;br&gt;&lt;pre&gt;    tar cvzf foo.tgz *.cc *.h
&lt;/pre&gt;This creates (c) a compressed (z) tar file named foo.tgz (f) and shows the files being stored into the tar file (v). The .tgz suffix is a convention for gzipped tar files, it's useful to use the convention since you'll know to use z to restore/extract.&lt;br&gt;&lt;br&gt;It's often more useful to tar a directory (which tars all files and subdirectories recursively unless you specify otherwise). The nice part about tarring a directory is that it is untarred as a directory rather than as individual files.&lt;br&gt;&lt;br&gt;&lt;pre&gt;   tar cvzf foo.tgz cps100
&lt;/pre&gt;will tar the directory cps100 (and its files/subdirectories) into a tar file named foo.tgz.&lt;br&gt;&lt;br&gt;To see a tar file's table of contents use:&lt;br&gt;&lt;pre&gt;   tar tzf foo.tgz
&lt;/pre&gt;&lt;br&gt;To extract the contents of a tar file use:&lt;br&gt;&lt;pre&gt;    tar xvzf foo.tgz
&lt;/pre&gt;</description>
<category>Tar</category>
<category>Bash</category>
<link>null#%5B%5BUsing%20Tar%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 10:02:00 GMT</pubDate>

</item>
<item>
<title>Using the at command for delayed jobs</title>
<description>&lt;pre&gt;dtownsend@n-jump:~$ at 9:51
warning: commands will be executed using /bin/sh
at&amp;gt; touch delme.txt
at&amp;gt; &amp;lt;EOT&amp;gt;
&lt;/pre&gt;Hit Ctrl d&lt;br&gt;&lt;pre&gt;job 2 at Mon Oct 10 09:51:00 2011
&lt;/pre&gt;</description>
<category>Bash</category>
<link>null#%5B%5BUsing%20the%20at%20command%20for%20delayed%20jobs%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 10:02:00 GMT</pubDate>

</item>
<item>
<title>Sniff a Port with ngrep</title>
<description>&lt;pre&gt;sudo ngrep -d lo port 8000
&lt;/pre&gt;</description>
<category>Bash</category>
<category>Ngrep</category>
<link>null#%5B%5BSniff%20a%20Port%20with%20ngrep%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 10:01:00 GMT</pubDate>

</item>
<item>
<title>Search and Replace Across Multiple Files</title>
<description>&lt;pre&gt;perl -p -i -e&quot;s#param_dict#util_dict#g&quot; `git grep &quot;param_dict&quot; | cut -d: -f1 | sort | uniq`
&lt;/pre&gt;</description>
<category>Bash</category>
<link>null#%5B%5BSearch%20and%20Replace%20Across%20Multiple%20Files%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 09:59:00 GMT</pubDate>

</item>
<item>
<title>Move Empty Files To New Directory</title>
<description>ls -al | grep -i .log$ | awk '$5==0 {print $8}'  |  xargs -I {} mv {} old_logs/</description>
<category>Bash</category>
<link>null#%5B%5BMove%20Empty%20Files%20To%20New%20Directory%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 09:57:00 GMT</pubDate>

</item>
<item>
<title>Moving Files more that 5 days old</title>
<description>&lt;pre&gt;sudo find ./ -type f -name &quot;mt_requests*.log&quot; -mtime +5 -exec nice gzip -v --fast {} \;
&lt;/pre&gt;</description>
<category>Bash</category>
<link>null#%5B%5BMoving%20Files%20more%20that%205%20days%20old%5D%5D</link>
<pubDate>Tue, 20 Mar 2012 09:57:00 GMT</pubDate>

</item>
</channel>
</rss>